/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.android.onesignal;

import com.onesignal.OneSignal;
import com.onesignal.OSEmailSubscriptionObserver;
import com.onesignal.OSEmailSubscriptionStateChanges;
import com.onesignal.OSInAppMessageAction;
import com.onesignal.OSNotification;
import com.onesignal.OSNotificationOpenResult;
import com.onesignal.OSSubscriptionStateChanges;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;
import org.json.JSONObject;

@Kroll.module(name = "OnesignalAndroid", id = "ti.android.onesignal")
public class OnesignalAndroidModule extends KrollModule {

	private static final String LCAT = "OnesignalAndroid";
	// private static final boolean DBG = TiConfig.LOGD;
	private static OnesignalAndroidModule module;
	private static OSNotificationOpenResult openNotification;

	public static final OneSignal.LOG_LEVEL LOG_LEVEL_NONE = OneSignal.LOG_LEVEL.NONE;
	public static final OneSignal.LOG_LEVEL LOG_LEVEL_DEBUG = OneSignal.LOG_LEVEL.DEBUG;
	public static final OneSignal.LOG_LEVEL LOG_LEVEL_INFO = OneSignal.LOG_LEVEL.INFO;
	public static final OneSignal.LOG_LEVEL LOG_LEVEL_WARN = OneSignal.LOG_LEVEL.WARN;
	public static final OneSignal.LOG_LEVEL LOG_LEVEL_ERROR = OneSignal.LOG_LEVEL.ERROR;
	public static final OneSignal.LOG_LEVEL LOG_LEVEL_FATAL = OneSignal.LOG_LEVEL.FATAL;
	public static final OneSignal.LOG_LEVEL LOG_LEVEL_VERBOSE = OneSignal.LOG_LEVEL.VERBOSE;

	public OnesignalAndroidModule() {
		super();
		module = this;
	}

	static TiApplication appContext = TiApplication.getInstance();

	public static OnesignalAndroidModule getModuleInstance() {
		return module;
	}

	private KrollFunction getTagsCallback = null;
	private KrollFunction idsAvailableCallback = null;

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "ti.android.onesignal inside onAppCreate");

		OneSignal.startInit(TiApplication.getInstance()).setInAppMessageClickHandler(new InAppMessageClickHandler())
				.setNotificationReceivedHandler(new NotificationReceivedHandler())
				.setNotificationOpenedHandler(new NotificationOpenedHandler())
				.unsubscribeWhenNotificationsAreDisabled(true).inFocusDisplaying(OneSignal.OSInFocusDisplayOption.None)
				.init();
	}

	public void listenerAdded(String type, int count, KrollProxy proxy) {
		Log.d(LCAT, "ti.android.onesignal added listener " + type);
		if (type.equals("notificationOpened") && count == 1 && openNotification instanceof OSNotificationOpenResult) {
			Log.d(LCAT, "ti.android.onesignal fire delayed event");
			try {
				if (openNotification.notification.payload != null) {
					JSONObject payload = openNotification.notification.payload.toJSONObject();
					payload.put("foreground", openNotification.notification.isAppInFocus);
					proxy.fireEvent("notificationOpened", payload);
				}
			} catch (Throwable t) {
				Log.d(LCAT, "ti.android.onesignal OSNotificationOpenResult could not be converted to JSON");
			}
			openNotification = null;
		}
	}

	@Kroll.method
	public void sendTag(Object tag) {
		@SuppressWarnings("unchecked")
		HashMap<String, Object> dict = (HashMap<String, Object>) tag;
		String key = TiConvert.toString(dict, "key");
		String value = TiConvert.toString(dict, "value");
		OneSignal.sendTag(key, value);
	}

	@Kroll.method
	public void deleteTag(Object tag) {
		@SuppressWarnings("unchecked")
		HashMap<String, Object> dict = (HashMap<String, Object>) tag;
		String key = TiConvert.toString(dict, "key");
		OneSignal.deleteTag(key);
	}

	@Kroll.method
	public void setSubscription(boolean enable) {
		OneSignal.setSubscription(enable);
	}

	@Kroll.method
	public void getTags(KrollFunction handler) {
		getTagsCallback = handler;
		OneSignal.getTags(new GetTagsHandler());
	}

	@Kroll.method
	public void idsAvailable(KrollFunction handler) {
		idsAvailableCallback = handler;
		OneSignal.idsAvailable(new IdsAvailableHandler());
	}

	@Kroll.method
	public void setLogLevel(HashMap<?, ?> args) {
		OneSignal.LOG_LEVEL logLevel = LOG_LEVEL_NONE;
		OneSignal.LOG_LEVEL visualLevel = LOG_LEVEL_NONE;

		Object level = args.get("logLevel");
		if (level instanceof OneSignal.LOG_LEVEL) {
			logLevel = (OneSignal.LOG_LEVEL) level;
		}

		level = args.get("visualLevel");
		if (level instanceof OneSignal.LOG_LEVEL) {
			visualLevel = (OneSignal.LOG_LEVEL) level;
		}
		OneSignal.setLogLevel(logLevel, visualLevel);
	}

	public void onOSSubscriptionChanged(OSSubscriptionStateChanges stateChanges) {
		if (getModuleInstance().hasListeners("subscriptionChanged")) {
			getModuleInstance().fireEvent("subscriptionChanged", stateChanges.toJSONObject());
		}

		Log.i("Debug", "onOSSubscriptionChanged: " + stateChanges);
	}

	@Kroll.method
	public void clearOneSignalNotifications() {
		OneSignal.clearOneSignalNotifications();
	}

	private class GetTagsHandler implements OneSignal.GetTagsHandler {
		@Override
		public void tagsAvailable(JSONObject tags) {
			HashMap<String, Object> dict = new HashMap<String, Object>();
			try {
				dict.put("success", true);
				dict.put("error", false);
				dict.put("results", tags.toString());
			} catch (Exception e) {
				dict.put("success", false);
				dict.put("error", true);
				e.printStackTrace();
				Log.d("error:", e.toString());
			}

			getTagsCallback.call(getKrollObject(), dict);
		}
	}

	private class IdsAvailableHandler implements OneSignal.IdsAvailableHandler {
		@Override
		public void idsAvailable(String userId, String registrationId) {
			HashMap<String, Object> dict = new HashMap<String, Object>();
			try {
				dict.put("userId", userId);
				dict.put("pushToken", registrationId);
			} catch (Exception e) {
				Log.d("error:", e.toString());
			}

			idsAvailableCallback.call(getKrollObject(), dict);
		}
	}

	private static class NotificationOpenedHandler implements OneSignal.NotificationOpenedHandler {
		// This fires when a notification is opened by tapping on it.
		@Override
		public void notificationOpened(OSNotificationOpenResult result) {
			Log.d(LCAT, "ti.android.onesignal Notification opened handler");
			if (TiApplication.getAppCurrentActivity() != null && getModuleInstance() != null) {
				try {
					if (result.notification.payload != null) {
						JSONObject payload = result.notification.payload.toJSONObject();
						payload.put("foreground", result.notification.isAppInFocus);

						if (getModuleInstance().hasListeners("notificationOpened")) {
							getModuleInstance().fireEvent("notificationOpened", payload);
						} else {
							// save the notification for later processing
							openNotification = result;
						}
					}
				} catch (Throwable t) {
					Log.d(LCAT, "ti.android.onesignal OSNotificationOpenResult could not be converted to JSON");
				}
			} else {
				// save the notification for later processing
				openNotification = result;
			}
		}
	}

	private static class NotificationReceivedHandler implements OneSignal.NotificationReceivedHandler {
		@Override
		public void notificationReceived(OSNotification notification) {
			Log.d(LCAT, "ti.android.onesignal Notification received handler");
			if (TiApplication.getAppCurrentActivity() != null && getModuleInstance() != null) {
				try {
					if (notification.payload != null) {
						JSONObject payload = notification.payload.toJSONObject();
						payload.put("foreground", notification.isAppInFocus);

						if (getModuleInstance().hasListeners("notificationReceived")) {
							getModuleInstance().fireEvent("notificationReceived", payload);
						}
					}
				} catch (Throwable t) {
					Log.d(LCAT, "ti.android.onesignal OSNotification could not be converted to JSON");
				}
			}
		}
	}

	// EXTERNAL USER ID
	// ==================================================================

	@Kroll.method
	public void setExternalUserId(String id) {
		if (id.isEmpty()) {
			Log.e(LCAT, "ti.android.onesignal id cannot be null");
			return;
		}
		Log.i(LCAT, "ti.android.onesignal setting user external id");
		OneSignal.setExternalUserId(id);
	}

	@Kroll.method
	public void removeExternalUserId() {
		Log.i(LCAT, "ti.android.onesignal removing user external id");
		OneSignal.removeExternalUserId();
	}

	// PROMPT FOR PERMISSION
	// ==========================================================================

	@Kroll.method
	public void promptForPushNotificationsWithUserResponse() {
		Log.i(LCAT, "ti.android.onesignal Prompted the user for location permissions");
		OneSignal.promptLocation();
	}
	
	// LOCATION
	// ==========================================================================

	@Kroll.method
	public void setLocationShared(Boolean value) {
		Log.i(LCAT, "ti.android.onesignal location collection changed to " + value.toString());
		OneSignal.setLocationShared(value);
	}

	// EMAIL
	// =============================================================================

	@Kroll.method
	public void setEmail(String email) {
		
		final String em = email;
		
		if (em.isEmpty()) {
			Log.e(LCAT, "ti.android.onesignal setEmail email cannot be null");
			return;
		}
		Log.i(LCAT, "ti.android.onesignal setting user email");
		OneSignal.setEmail(em, new OneSignal.EmailUpdateHandler() {
			@Override
			public void onSuccess() {
				if (getModuleInstance().hasListeners("emailUpdatedSuccess")) {
					
					KrollDict props = new KrollDict();
					
					props.put("success", true);
					props.put("email", em);
					
					getModuleInstance().fireEvent("emailUpdatedSuccess", props);
				}
			}

			@Override
			public void onFailure(OneSignal.EmailUpdateError error) {
				// Error syncing email, check error.getType() and error.getMessage() for details
				if (getModuleInstance().hasListeners("emailUpdatedError")) {
					
					KrollDict props = new KrollDict();
					
					props.put("success", false);
					props.put("error", true);
					props.put("message", error.getMessage());
					props.put("email", em);
					
					getModuleInstance().fireEvent("emailUpdatedError", props);
				}
			}
		});
	}

	@Kroll.method
	public void logoutEmail() {
		Log.i(LCAT, "ti.android.onesignal dissociated the email from this device");
		OneSignal.logoutEmail();
	}

	OSEmailSubscriptionObserver subscriptionObserver = new OSEmailSubscriptionObserver() {
		@Override
		public void onOSEmailSubscriptionChanged(OSEmailSubscriptionStateChanges stateChanges) {
			if (getModuleInstance().hasListeners("emailSubscriptionChanged")) {
				getModuleInstance().fireEvent("emailSubscriptionChanged", stateChanges.toJSONObject());
			}

			Log.i("Debug", "onOSEmailSubscriptionChanged: " + stateChanges);
		}
	};

	// IN-APP MESSAGES
	// =============================================================================

	private static class InAppMessageClickHandler implements OneSignal.InAppMessageClickHandler {
		@Override
		public void inAppMessageClicked(OSInAppMessageAction result) {

			Log.i("ti.android.onesignal", "Custom Action took place! Firing inAppMessageClicked event!");

			KrollDict props = new KrollDict();

			props.put("clickName", result.clickName);
			props.put("clickUrl", result.clickUrl);
			props.put("firstClick", result.firstClick);
			props.put("closesMessage", result.closesMessage);

			getModuleInstance().fireEvent("inAppMessageClicked", props);
		}
	}

	@Kroll.method
	public void addTrigger(KrollDict d) {
		String triggerKey = null;
		Object triggerValue = null;

		if (d.containsKey((Object) "key")) {
			triggerKey = (String) d.getString("key");
		}

		if (d.containsKey((Object) "value")) {
			triggerValue = d.getString("value");
		}

		if (triggerKey.isEmpty() || triggerValue.toString().isEmpty()) {
			Log.e(LCAT, "ti.android.onesignal addTrigger key and value cannot be null");
			return;
		}

		OneSignal.addTrigger(triggerKey, triggerValue);
	}

	@Kroll.method
	public void addTriggers(KrollDict d) {
		if (d.isEmpty()) {
			Log.e(LCAT, "ti.android.onesignal addTriggers object cannot be null");
			return;
		}

		HashMap<String, Object> triggers = new HashMap<String, Object>();
		triggers = (HashMap<String, Object>) d;
		OneSignal.addTriggers(triggers);
	}

	@Kroll.method
	public void removeTriggerForKey(String key) {
		if (key.isEmpty()) {
			Log.e(LCAT, "ti.android.onesignal removeTriggerForKey key cannot be null");
			return;
		}
		OneSignal.removeTriggerForKey(key);
	}

	@Kroll.method
	public void removeTriggersForKeys(Object o) {
		if (o.getClass().isArray()) {
			String[] triggerArray = (String[]) o;
			Collection<String> triggers = Arrays.asList(triggerArray);
			OneSignal.removeTriggersForKeys(triggers);
		} else {
			Log.e(LCAT, "ti.android.onesignal removeTriggersForKeys demands an Array of Strings");
		}
	}

	@Kroll.method
	public KrollDict getTriggerValueForKey(String key) {

		KrollDict props = new KrollDict();

		if (key.isEmpty()) {
			Log.e(LCAT, "ti.android.onesignal getTriggerValueForKey key cannot be null");

			props.put("error", true);
			props.put("success", false);
			props.put("message", "key cannot be null");
			return props;
		}

		props.put("object", OneSignal.getTriggerValueForKey(key));

		return props;
	}

	@Kroll.method
	public void pauseInAppMessages(Boolean value) {
		OneSignal.pauseInAppMessages(value);
	}

	// Appearance

	@Kroll.method
	public void enableVibrate(Boolean value) {
		OneSignal.enableVibrate(value);
	}

	@Kroll.method
	public void enableSound(Boolean value) {
		OneSignal.enableSound(value);
	}
}
